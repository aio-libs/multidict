---

name: CI/CD

on:
  merge_group:
  push:
    branches:
    - master
    - >-
      [0-9].[0-9]+
    tags:
    - v*
  pull_request:
    branches:
    - master
    - >-
      [0-9].[0-9]+
  schedule:
  - cron: 0 6 * * *  # Daily 6AM UTC build


env:
  COLOR: >-  # Supposedly, pytest or coveragepy use this
    yes
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1  # MyPy's color enforcement
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PRE_COMMIT_COLOR: always
  PROJECT_NAME: multidict
  PY_COLORS: 1  # Recognized by the `py` package, dependency of `pytest`
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  PYTHON_LATEST: 3.x


jobs:

  pre-setup:
    name: ⚙️ Pre-set global build settings
    runs-on: ubuntu-latest
    timeout-minutes: 1
    defaults:
      run:
        shell: python
    outputs:
      # NOTE: These aren't env vars because the `${{ env }}` context is
      # NOTE: inaccessible when passing inputs to reusable workflows.
      dists-artifact-name: python-package-distributions
      sdist-name: ${{ env.PROJECT_NAME }}-*.tar.gz
      wheel-name: ${{ env.PROJECT_NAME }}-*.whl
    steps:
    - run: >-
        print('No-op')


  build-pure-python-dists:
    name: 📦 Build distribution packages
    needs:
    - pre-setup
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      sdist-filename: >-
        ${{ steps.dist-filenames-detection.outputs.sdist-filename }}
      wheel-filename: >-
        ${{ steps.dist-filenames-detection.outputs.wheel-filename }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_LATEST }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_LATEST }}
    - name: Install core libraries for build
      run: python -Im pip install build
    - name: Build sdists and pure-python wheel
      env:
        MULTIDICT_NO_EXTENSIONS: Y
      run: python -Im build
    - name: Determine actual created filenames
      id: dist-filenames-detection
      run: >-
        {
        echo -n sdist-filename=
        ;
        basename "$(ls -1 dist/${{ needs.pre-setup.outputs.sdist-name }})"
        ;
        echo -n wheel-filename=
        ;
        basename "$(ls -1 dist/${{ needs.pre-setup.outputs.wheel-name }})"
        ;
        }
        >> "${GITHUB_OUTPUT}"
    - name: Upload built artifacts for testing
      uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: ${{ needs.pre-setup.outputs.dists-artifact-name  }}
        # NOTE: Exact expected file names are specified here
        # NOTE: as a safety measure — if anything weird ends
        # NOTE: up being in this dir or not all dists will be
        # NOTE: produced, this will fail the workflow.
        path: |
          dist/${{ steps.dist-filenames-detection.outputs.sdist-filename }}
          dist/${{ steps.dist-filenames-detection.outputs.wheel-filename }}
        retention-days: 15

  lint:
    uses: ./.github/workflows/reusable-linters.yml

  test:
    name: Test
    needs:
    - build-pure-python-dists  # transitive, for accessing settings
    - pre-setup  # transitive, for accessing settings
    strategy:
      matrix:
        pyver:
        - 3.7
        - 3.8
        - 3.9
        - >-
          3.10
        - 3.11
        - 3.12
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
        - os: macos
          no-extensions: Y
        - os: windows
          no-extensions: Y
        include:
        - pyver: pypy-3.8
          no-extensions: Y
          os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Retrieve the project source from an sdist inside the GHA artifact
      uses: re-actors/checkout-python-sdist@release/v1
      with:
        source-tarball-name: >-
          ${{ needs.build-pure-python-dists.outputs.sdist-filename }}
        workflow-artifact-name: >-
          ${{ needs.pre-setup.outputs.dists-artifact-name }}
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: >-
          pip-ci-${{
            runner.os
          }}-${{
            matrix.pyver
          }}-{{
            matrix.no-extensions
          }}-${{
            hashFiles('requirements/*.txt')
          }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: >-
          pip-ci-${{
            runner.os
          }}-${{
            matrix.pyver
          }}-{{
            matrix.no-extensions
          }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
      env:
        MULTIDICT_NO_EXTENSIONS: ${{ matrix.no-extensions }}
    - name: Run unittests
      run: |
        python -m pytest tests -vv
    - name: Prepare coverage artifact
      # combining Linux and Windows paths is tricky, left this exercise for
      # others multidict has no Windows or macOS specific code paths anyway
      if: ${{ matrix.os == 'ubuntu' }}
      uses: aio-libs/prepare-coverage@v22.1.2

  test-summary:
    name: Tests status
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [lint, test]
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v22.1.4

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Dummy
      run: |
        echo "Predeploy step"

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    needs:
    - build-pure-python-dists
    - pre-deploy
    - pre-setup  # transitive, for accessing settings
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        qemu: ['']
        include:
        # Split ubuntu job for the sake of speed-up
        - os: ubuntu
          qemu: aarch64
        - os: ubuntu
          qemu: ppc64le
        - os: ubuntu
          qemu: s390x
    uses: ./.github/workflows/reusable-build-wheel.yml
    with:
      os: ${{ matrix.os }}
      qemu: ${{ matrix.qemu }}
      source-tarball-name: >-
        ${{ needs.build-pure-python-dists.outputs.sdist-filename }}
      dists-artifact-name: ${{ needs.pre-setup.outputs.dists-artifact-name }}

  deploy:
    name: Deploy
    needs:
    - build-pure-python-dists
    - build-wheels
    - pre-setup  # transitive, for accessing settings
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PROJECT_NAME }}

    steps:
    - name: Retrieve the project source from an sdist inside the GHA artifact
      uses: re-actors/checkout-python-sdist@release/v1
      with:
        source-tarball-name: >-
          ${{ needs.build-pure-python-dists.outputs.sdist-filename }}
        workflow-artifact-name: >-
          ${{ needs.pre-setup.outputs.dists-artifact-name }}
    - name: Login
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Download dists
      uses: actions/download-artifact@v3
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: ${{ env.PROJECT_NAME }}
        version_file: ${{ env.PROJECT_NAME }}/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        artifact: >-
          ${{ needs.pre-setup.outputs.dists-artifact-name }}
        fix_issue_regex: ":issue:`(\\d+)`"
        fix_issue_repl: "(#\\1)"

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/${{ needs.build-pure-python-dists.outputs.sdist-filename }}
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v1
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**

...
