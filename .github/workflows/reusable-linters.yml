---

name: Linters

on:
  workflow_call:
    secrets:
      codecov-token:
        description: Mandatory token for uploading to Codecov
        required: true

env:
  COLOR: >-  # Supposedly, pytest or coveragepy use this
    yes
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1  # MyPy's color enforcement
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PRE_COMMIT_COLOR: always
  PY_COLORS: 1  # Recognized by the `py` package, dependency of `pytest`
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  PYTHON_LATEST: 3.9

jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ env.PYTHON_LATEST }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_LATEST }}
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Cache pre-commit.com virtualenvs
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: >-
          ${{
            runner.os
          }}-pre-commit-${{
            hashFiles('.pre-commit-config.yaml')
          }}
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint
    - name: Send coverage data to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.codecov-token }}
        files: >-
          .tox/.tmp/.mypy/python-3.13/cobertura.xml,
          .tox/.tmp/.mypy/python-3.11/cobertura.xml,
          .tox/.tmp/.mypy/python-3.9/cobertura.xml,
          .tox/.tmp/.mypy/python-3.7/cobertura.xml
        flags: >-
          CI-GHA,
          MyPy
        fail_ci_if_error: false
    - name: Install spell checker
      run: |
        sudo apt install libenchant-2-dev
        pip install -r requirements/doc.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U build twine
        python -m build
      env:
        MULTIDICT_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check --strict dist/*

...
