# cython: language_level = 3, freethreading_compatible=True
from cpython.object cimport PyObject, PyTypeObject
from libc.stdint cimport uint64_t

# WARNING: THIS FILE IS AUTOGENERATED DO NOT EDIT!!! 
# YOUR CHANGES WILL GET OVERWRITTEN AND YOUR POOR EDITS WILL BE GONE!!!
# GENERATED ON: 2025-07-18 22:30:40.701692+00:00
# COMPILIED BY: anonymous

cdef extern from "multidict_api.h":
    """
/* Extra Data comes from multidict.__init__.pxd */
/* Ensure we can obtain the Functions we wish to utilize */
#define MULTIDICT_IMPL
MultiDict_CAPI* __cython_multidict_api;

// Redefinitions incase required by cython...
// Don't want size calculations to get screwed up...

#if PY_VERSION_HEX >= 0x030c00f0
#define __MANAGED_WEAKREFS
#endif

typedef struct _htkeys {
    uint8_t log2_size;
    uint8_t log2_index_bytes;
    Py_ssize_t usable;
    Py_ssize_t nentries;
    char indices[];
} htkeys_t;

typedef struct {
    PyObject_HEAD
#ifndef __MANAGED_WEAKREFS
    PyObject *weaklist;
#endif
    // we can ignore state however we already know it's 
    // a size of 4/8 depending on 32/64 bit...
    void *state; 
    Py_ssize_t used;
    uint64_t version;
    bool is_ci;
    htkeys_t *keys;
} MultiDictObject;

typedef struct {
    PyObject_HEAD
#ifndef __MANAGED_WEAKREFS
    PyObject *weaklist;
#endif
    MultiDictObject *md;
} MultiDictProxyObject;

typedef struct {
    PyUnicodeObject str;
    PyObject *canonical;
    void *state;
} istrobject;

int multidict_import(){
    __cython_multidict_api = MultiDict_Import();
    return __cython_multidict_api != NULL;
}
    """
    # NOTE: Important that you import this 
    # After you've c-imported multidict 
    int multidict_import() except 0
    # Predefined objects from istr & multidict
    ctypedef struct MultiDictObject:
        pass
    
    ctypedef struct MultiDictProxyObject:
        pass
    
    ctypedef struct istrobject:
        pass 
        
    ctypedef class multidict._multidict.istr [object istrobject, check_size ignore]:
        pass
    
    ctypedef class multidict._multidict.MultiDict [object MultiDictObject, check_size ignore]:
        pass
    
    ctypedef class multidict._multidict.CIMultiDict [object MultiDictObject, check_size ignore]:
        pass
    
    ctypedef class multidict._multidict.MultiDictProxy [object MultiDictProxyObject, check_size ignore]:
        pass
    
    ctypedef class multidict._multidict.CIMultiDictProxy [object MultiDictProxyObject, check_size ignore]:
        pass
    
    
    
    enum _UpdateOp:
        Extend = 0
        Update = 1
        Merge = 2
    
    ctypedef _UpdateOp UpdateOp
    
    struct MultiDict_CAPI:
        PyTypeObject * (*MultiDict_GetType)(void * state)
        PyObject * (*MultiDict_New)(void * state, int prealloc_size)
        int (*MultiDict_Add)(void * state, object self, object key, object value)
        int (*MultiDict_Clear)(void * state, object self)
        int (*MultiDict_SetDefault)(void * state, object self, object key, object default_, PyObject ** result)
        int (*MultiDict_Del)(void * state, object self, object key)
        uint64_t (*MultiDict_Version)(void * state, object self)
        int (*MultiDict_Contains)(void * state, object self, object key)
        int (*MultiDict_GetOne)(void * state, object self, object key, PyObject ** result)
        int (*MultiDict_GetAll)(void * state, object self, object key, PyObject ** result)
        int (*MultiDict_PopOne)(void * state, object self, object key, PyObject ** result)
        int (*MultiDict_PopAll)(void * state, object self, object key, PyObject ** result)
        PyObject * (*MultiDict_PopItem)(void * state, object self)
        int (*MultiDict_Replace)(void * state, object self, object key, object value)
        int (*MultiDict_UpdateFromMultiDict)(void * state, object self, object other, UpdateOp op)
        int (*MultiDict_UpdateFromDict)(void * state, object self, object kwds, UpdateOp op)
        int (*MultiDict_UpdateFromSequence)(void * state, object self, object kwds, UpdateOp op)
        PyObject * (*MultiDictProxy_New)(void * state, object md)
        int (*MultiDictProxy_Contains)(void * state, object self, object key)
        int (*MultiDictProxy_GetAll)(void * state, object self, object key, PyObject ** result)
        int (*MultiDictProxy_GetOne)(void * state, object self, object key, PyObject ** result)
        PyTypeObject * (*MultiDictProxy_GetType)(void * state)
        PyObject * (*IStr_FromUnicode)(void * state, object str)
        PyObject * (*IStr_FromStringAndSize)(void * state, const char * str, Py_ssize_t size)
        PyObject * (*IStr_FromString)(void * state, const char * str)
        PyTypeObject * (*IStr_GetType)(void * state)
        PyTypeObject * (*CIMultiDict_GetType)(void * state)
        PyObject * (*CIMultiDict_New)(void * state, int prealloc_size)
        int (*CIMultiDict_Add)(void * state, object self, object key, object value)
        int (*CIMultiDict_Clear)(void * state, object self)
        int (*CIMultiDict_SetDefault)(void * state, object self, object key, object default_, PyObject ** result)
        int (*CIMultiDict_Del)(void * state, object self, object key)
        uint64_t (*CIMultiDict_Version)(void * state, object self)
        int (*CIMultiDict_Contains)(void * state, object self, object key)
        int (*CIMultiDict_GetOne)(void * state, object self, object key, PyObject ** result)
        int (*CIMultiDict_GetAll)(void * state, object self, object key, PyObject ** result)
        int (*CIMultiDict_PopOne)(void * state, object self, object key, PyObject ** result)
        int (*CIMultiDict_PopAll)(void * state, object self, object key, PyObject ** result)
        PyObject * (*CIMultiDict_PopItem)(void * state, object self)
        int (*CIMultiDict_Replace)(void * state, object self, object key, object value)
        int (*CIMultiDict_UpdateFromMultiDict)(void * state, object self, object other, UpdateOp op)
        int (*CIMultiDict_UpdateFromDict)(void * state, object self, object kwds, UpdateOp op)
        int (*CIMultiDict_UpdateFromSequence)(void * state, object self, object kwds, UpdateOp op)
        PyObject * (*CIMultiDictProxy_New)(void * state, object md)
        int (*CIMultiDictProxy_Contains)(void * state, object self, object key)
        int (*CIMultiDictProxy_GetAll)(void * state, object self, object key, PyObject ** result)
        int (*CIMultiDictProxy_GetOne)(void * state, object self, object key, PyObject ** result)
        PyTypeObject * (*CIMultiDictProxy_GetType)(void * state)
        PyObject * (*MultiDictIter_New)(void * state_, object self)
        int (*MultiDictIter_Next)(void * state_, object self, PyObject ** key, PyObject ** value)
    
    
    MultiDict_CAPI * C_MultiDict_Import "MultiDict_Import"() except NULL
    
    PyTypeObject * C_MultiDict_GetType "MultiDict_GetType"(MultiDict_CAPI * api) except NULL
    
    int C_MultiDict_CheckExact "MultiDict_CheckExact"(MultiDict_CAPI * api, object op) except -1
    
    int C_MultiDict_Check "MultiDict_Check"(MultiDict_CAPI * api, object op) except -1
    
    PyObject * C_MultiDict_New "MultiDict_New"(MultiDict_CAPI * api, int prealloc_size) except NULL
    
    int C_MultiDict_Add "MultiDict_Add"(MultiDict_CAPI * api, object self, object key, object value) except -1
    
    int C_MultiDict_Clear "MultiDict_Clear"(MultiDict_CAPI * api, object self) except -1
    
    int C_MultiDict_SetDefault "MultiDict_SetDefault"(MultiDict_CAPI * api, object self, object key, object default_, PyObject ** result) except -1
    
    int C_MutliDict_Del "MutliDict_Del"(MultiDict_CAPI * api, object self, object key) except -1
    
    uint64_t C_MultiDict_Version "MultiDict_Version"(MultiDict_CAPI * api, object self)
    
    int C_MultiDict_Contains "MultiDict_Contains"(MultiDict_CAPI * api, object self, object key) except -1
    
    int C_MultiDict_GetOne "MultiDict_GetOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_MultiDict_GetAll "MultiDict_GetAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_MultiDict_PopOne "MultiDict_PopOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_MultiDict_PopAll "MultiDict_PopAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    PyObject * C_MultiDict_PopItem "MultiDict_PopItem"(MultiDict_CAPI * api, object self) except NULL
    
    int C_MultiDict_Replace "MultiDict_Replace"(MultiDict_CAPI * api, object self, object key, object value) except -1
    
    int C_MultiDict_UpdateFromMultiDict "MultiDict_UpdateFromMultiDict"(MultiDict_CAPI * api, object self, object other, UpdateOp op) except -1
    
    int C_MultiDict_UpdateFromDict "MultiDict_UpdateFromDict"(MultiDict_CAPI * api, object self, object other, UpdateOp op) except -1
    
    int C_MultiDict_UpdateFromSequence "MultiDict_UpdateFromSequence"(MultiDict_CAPI * api, object self, object seq, UpdateOp op) except -1
    
    PyObject * C_MultiDictProxy_New "MultiDictProxy_New"(MultiDict_CAPI * api, object md) except NULL
    
    int C_MultiDictProxy_CheckExact "MultiDictProxy_CheckExact"(MultiDict_CAPI * api, object op) except -1
    
    int C_MultiDictProxy_Check "MultiDictProxy_Check"(MultiDict_CAPI * api, object op) except -1
    
    int C_MultiDictProxy_Contains "MultiDictProxy_Contains"(MultiDict_CAPI * api, object self, object key) except -1
    
    int C_MultiDictProxy_GetAll "MultiDictProxy_GetAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_MultiDictProxy_GetOne "MultiDictProxy_GetOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    PyTypeObject * C_MultiDictProxy_GetType "MultiDictProxy_GetType"(MultiDict_CAPI * api) except NULL
    
    int C_IStr_CheckExact "IStr_CheckExact"(MultiDict_CAPI * api, object op) except -1
    
    int C_IStr_Check "IStr_Check"(MultiDict_CAPI * api, object op) except -1
    
    PyObject * C_IStr_FromUnicode "IStr_FromUnicode"(MultiDict_CAPI * api, object str) except NULL
    
    PyObject * C_IStr_FromStringAndSize "IStr_FromStringAndSize"(MultiDict_CAPI * api, const char * str, Py_ssize_t size) except NULL
    
    PyObject * C_IStr_FromString "IStr_FromString"(MultiDict_CAPI * api, const char * str) except NULL
    
    PyTypeObject * C_IStr_GetType "IStr_GetType"(MultiDict_CAPI * api) except NULL
    
    PyTypeObject * C_CIMultiDict_GetType "CIMultiDict_GetType"(MultiDict_CAPI * api) except NULL
    
    int C_CIMultiDict_CheckExact "CIMultiDict_CheckExact"(MultiDict_CAPI * api, object op) except -1
    
    int C_CIMultiDict_Check "CIMultiDict_Check"(MultiDict_CAPI * api, object op) except -1
    
    PyObject * C_CIMultiDict_New "CIMultiDict_New"(MultiDict_CAPI * api, int prealloc_size) except NULL
    
    int C_CIMultiDict_Add "CIMultiDict_Add"(MultiDict_CAPI * api, object self, object key, object value) except -1
    
    int C_CIMultiDict_Clear "CIMultiDict_Clear"(MultiDict_CAPI * api, object self) except -1
    
    int C_CIMultiDict_SetDefault "CIMultiDict_SetDefault"(MultiDict_CAPI * api, object self, object key, object default_, PyObject ** result) except -1
    
    int C_CIMutliDict_Del "CIMutliDict_Del"(MultiDict_CAPI * api, object self, object key) except -1
    
    uint64_t C_CIMultiDict_Version "CIMultiDict_Version"(MultiDict_CAPI * api, object self)
    
    int C_CIMultiDict_Contains "CIMultiDict_Contains"(MultiDict_CAPI * api, object self, object key) except -1
    
    int C_CIMultiDict_GetOne "CIMultiDict_GetOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_CIMultiDict_GetAll "CIMultiDict_GetAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_CIMultiDict_PopOne "CIMultiDict_PopOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_CIMultiDict_PopAll "CIMultiDict_PopAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    PyObject * C_CIMultiDict_PopItem "CIMultiDict_PopItem"(MultiDict_CAPI * api, object self) except NULL
    
    int C_CIMultiDict_Replace "CIMultiDict_Replace"(MultiDict_CAPI * api, object self, object key, object value) except -1
    
    int C_CIMultiDict_UpdateFromMultiDict "CIMultiDict_UpdateFromMultiDict"(MultiDict_CAPI * api, object self, object other, UpdateOp op) except -1
    
    int C_CIMultiDict_UpdateFromDict "CIMultiDict_UpdateFromDict"(MultiDict_CAPI * api, object self, object other, UpdateOp op) except -1
    
    int C_CIMultiDict_UpdateFromSequence "CIMultiDict_UpdateFromSequence"(MultiDict_CAPI * api, object self, object seq, UpdateOp op) except -1
    
    PyObject * C_CIMultiDictProxy_New "CIMultiDictProxy_New"(MultiDict_CAPI * api, object md) except NULL
    
    int C_CIMultiDictProxy_CheckExact "CIMultiDictProxy_CheckExact"(MultiDict_CAPI * api, object op) except -1
    
    int C_CIMultiDictProxy_Check "CIMultiDictProxy_Check"(MultiDict_CAPI * api, object op) except -1
    
    int C_CIMultiDictProxy_Contains "CIMultiDictProxy_Contains"(MultiDict_CAPI * api, object self, object key) except -1
    
    int C_CIMultiDictProxy_GetAll "CIMultiDictProxy_GetAll"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    int C_CIMultiDictProxy_GetOne "CIMultiDictProxy_GetOne"(MultiDict_CAPI * api, object self, object key, PyObject ** result) except -1
    
    PyTypeObject * C_CIMultiDictProxy_GetType "CIMultiDictProxy_GetType"(MultiDict_CAPI * api) except NULL
    
    PyObject * C_MultiDictIter_New "MultiDictIter_New"(MultiDict_CAPI * api, object self) except NULL
    
    int C_MultiDictIter_Next "MultiDictIter_Next"(MultiDict_CAPI * api, object self, PyObject ** key, PyObject ** value) except -1
    MultiDict_CAPI* __cython_multidict_api

# === Cython API ===
cdef inline MultiDict_CAPI * MultiDict_Import():
    return C_MultiDict_Import()

cdef inline type MultiDict_GetType():
    return <type>C_MultiDict_GetType(__cython_multidict_api)

cdef inline int MultiDict_CheckExact(object op):
    return C_MultiDict_CheckExact(__cython_multidict_api, op)

cdef inline int MultiDict_Check(object op):
    return C_MultiDict_Check(__cython_multidict_api, op)

cdef inline MultiDict MultiDict_New(int prealloc_size):
    return <MultiDict>C_MultiDict_New(__cython_multidict_api, prealloc_size)

cdef inline int MultiDict_Add(object self, object key, object value):
    return C_MultiDict_Add(__cython_multidict_api, self, key, value)

cdef inline int MultiDict_Clear(object self):
    return C_MultiDict_Clear(__cython_multidict_api, self)

cdef inline int MultiDict_SetDefault(object self, object key, object default_, PyObject ** result):
    return C_MultiDict_SetDefault(__cython_multidict_api, self, key, default_, result)

cdef inline int MutliDict_Del(object self, object key):
    return C_MutliDict_Del(__cython_multidict_api, self, key)

cdef inline uint64_t MultiDict_Version(object self):
    return C_MultiDict_Version(__cython_multidict_api, self)

cdef inline int MultiDict_Contains(object self, object key):
    return C_MultiDict_Contains(__cython_multidict_api, self, key)

cdef inline int MultiDict_GetOne(object self, object key, PyObject ** result):
    return C_MultiDict_GetOne(__cython_multidict_api, self, key, result)

cdef inline int MultiDict_GetAll(object self, object key, PyObject ** result):
    return C_MultiDict_GetAll(__cython_multidict_api, self, key, result)

cdef inline int MultiDict_PopOne(object self, object key, PyObject ** result):
    return C_MultiDict_PopOne(__cython_multidict_api, self, key, result)

cdef inline int MultiDict_PopAll(object self, object key, PyObject ** result):
    return C_MultiDict_PopAll(__cython_multidict_api, self, key, result)

cdef inline tuple MultiDict_PopItem(object self):
    return <tuple>C_MultiDict_PopItem(__cython_multidict_api, self)

cdef inline int MultiDict_Replace(object self, object key, object value):
    return C_MultiDict_Replace(__cython_multidict_api, self, key, value)

cdef inline int MultiDict_UpdateFromMultiDict(object self, object other, UpdateOp op):
    return C_MultiDict_UpdateFromMultiDict(__cython_multidict_api, self, other, op)

cdef inline int MultiDict_UpdateFromDict(object self, object other, UpdateOp op):
    return C_MultiDict_UpdateFromDict(__cython_multidict_api, self, other, op)

cdef inline int MultiDict_UpdateFromSequence(object self, object seq, UpdateOp op):
    return C_MultiDict_UpdateFromSequence(__cython_multidict_api, self, seq, op)

cdef inline MultiDictProxy MultiDictProxy_New(object md):
    return <MultiDictProxy>C_MultiDictProxy_New(__cython_multidict_api, md)

cdef inline int MultiDictProxy_CheckExact(object op):
    return C_MultiDictProxy_CheckExact(__cython_multidict_api, op)

cdef inline int MultiDictProxy_Check(object op):
    return C_MultiDictProxy_Check(__cython_multidict_api, op)

cdef inline int MultiDictProxy_Contains(object self, object key):
    return C_MultiDictProxy_Contains(__cython_multidict_api, self, key)

cdef inline int MultiDictProxy_GetAll(object self, object key, PyObject ** result):
    return C_MultiDictProxy_GetAll(__cython_multidict_api, self, key, result)

cdef inline int MultiDictProxy_GetOne(object self, object key, PyObject ** result):
    return C_MultiDictProxy_GetOne(__cython_multidict_api, self, key, result)

cdef inline type MultiDictProxy_GetType():
    return <type>C_MultiDictProxy_GetType(__cython_multidict_api)

cdef inline int IStr_CheckExact(object op):
    return C_IStr_CheckExact(__cython_multidict_api, op)

cdef inline int IStr_Check(object op):
    return C_IStr_Check(__cython_multidict_api, op)

cdef inline istr IStr_FromUnicode(object str):
    return <istr>C_IStr_FromUnicode(__cython_multidict_api, str)

cdef inline istr IStr_FromStringAndSize(const char * str, Py_ssize_t size):
    return <istr>C_IStr_FromStringAndSize(__cython_multidict_api, str, size)

cdef inline istr IStr_FromString(const char * str):
    return <istr>C_IStr_FromString(__cython_multidict_api, str)

cdef inline type IStr_GetType():
    return <type>C_IStr_GetType(__cython_multidict_api)

cdef inline type CIMultiDict_GetType():
    return <type>C_CIMultiDict_GetType(__cython_multidict_api)

cdef inline int CIMultiDict_CheckExact(object op):
    return C_CIMultiDict_CheckExact(__cython_multidict_api, op)

cdef inline int CIMultiDict_Check(object op):
    return C_CIMultiDict_Check(__cython_multidict_api, op)

cdef inline CIMultiDict CIMultiDict_New(int prealloc_size):
    return <CIMultiDict>C_CIMultiDict_New(__cython_multidict_api, prealloc_size)

cdef inline int CIMultiDict_Add(object self, object key, object value):
    return C_CIMultiDict_Add(__cython_multidict_api, self, key, value)

cdef inline int CIMultiDict_Clear(object self):
    return C_CIMultiDict_Clear(__cython_multidict_api, self)

cdef inline int CIMultiDict_SetDefault(object self, object key, object default_, PyObject ** result):
    return C_CIMultiDict_SetDefault(__cython_multidict_api, self, key, default_, result)

cdef inline int CIMutliDict_Del(object self, object key):
    return C_CIMutliDict_Del(__cython_multidict_api, self, key)

cdef inline uint64_t CIMultiDict_Version(object self):
    return C_CIMultiDict_Version(__cython_multidict_api, self)

cdef inline int CIMultiDict_Contains(object self, object key):
    return C_CIMultiDict_Contains(__cython_multidict_api, self, key)

cdef inline int CIMultiDict_GetOne(object self, object key, PyObject ** result):
    return C_CIMultiDict_GetOne(__cython_multidict_api, self, key, result)

cdef inline int CIMultiDict_GetAll(object self, object key, PyObject ** result):
    return C_CIMultiDict_GetAll(__cython_multidict_api, self, key, result)

cdef inline int CIMultiDict_PopOne(object self, object key, PyObject ** result):
    return C_CIMultiDict_PopOne(__cython_multidict_api, self, key, result)

cdef inline int CIMultiDict_PopAll(object self, object key, PyObject ** result):
    return C_CIMultiDict_PopAll(__cython_multidict_api, self, key, result)

cdef inline tuple CIMultiDict_PopItem(object self):
    return <tuple>C_CIMultiDict_PopItem(__cython_multidict_api, self)

cdef inline int CIMultiDict_Replace(object self, object key, object value):
    return C_CIMultiDict_Replace(__cython_multidict_api, self, key, value)

cdef inline int CIMultiDict_UpdateFromMultiDict(object self, object other, UpdateOp op):
    return C_CIMultiDict_UpdateFromMultiDict(__cython_multidict_api, self, other, op)

cdef inline int CIMultiDict_UpdateFromDict(object self, object other, UpdateOp op):
    return C_CIMultiDict_UpdateFromDict(__cython_multidict_api, self, other, op)

cdef inline int CIMultiDict_UpdateFromSequence(object self, object seq, UpdateOp op):
    return C_CIMultiDict_UpdateFromSequence(__cython_multidict_api, self, seq, op)

cdef inline CIMultiDictProxy CIMultiDictProxy_New(object md):
    return <CIMultiDictProxy>C_CIMultiDictProxy_New(__cython_multidict_api, md)

cdef inline int CIMultiDictProxy_CheckExact(object op):
    return C_CIMultiDictProxy_CheckExact(__cython_multidict_api, op)

cdef inline int CIMultiDictProxy_Check(object op):
    return C_CIMultiDictProxy_Check(__cython_multidict_api, op)

cdef inline int CIMultiDictProxy_Contains(object self, object key):
    return C_CIMultiDictProxy_Contains(__cython_multidict_api, self, key)

cdef inline int CIMultiDictProxy_GetAll(object self, object key, PyObject ** result):
    return C_CIMultiDictProxy_GetAll(__cython_multidict_api, self, key, result)

cdef inline int CIMultiDictProxy_GetOne(object self, object key, PyObject ** result):
    return C_CIMultiDictProxy_GetOne(__cython_multidict_api, self, key, result)

cdef inline type CIMultiDictProxy_GetType():
    return <type>C_CIMultiDictProxy_GetType(__cython_multidict_api)

cdef inline object MultiDictIter_New(object self):
    return <object>C_MultiDictIter_New(__cython_multidict_api, self)

cdef inline int MultiDictIter_Next(object self, PyObject ** key, PyObject ** value):
    return C_MultiDictIter_Next(__cython_multidict_api, self, key, value)
