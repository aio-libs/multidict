conditions: v1
if: >  # Forbid running non-PR pushes from pyup bot
  not (type != pull_request AND branch =~ ^pyup\-scheduled\-update\-)

sudo: false

language: python

python:
- 3.4
- 3.5
- &mainstream_python 3.6
- 3.6-dev
- nightly

install: &default_install
- python -m pip install -U tox
- python -m tox --notest  # Pre-populate a virtualenv with dependencies

script: &default_script
- python -m tox

after_success:
- python -m tox -e codecov

_helpers:
- &_mainstream_python_base
  python: *mainstream_python
- &_reset_steps
  env: {}
  before_install: skip
  install: skip
  script: skip
  after_success: []
- &_lint_base
  stage: &doc_stage_name docs, linting and pre-test checks
  <<: *_mainstream_python_base
  <<: *_reset_steps
  install: *default_install
  script: *default_script
- &_doc_base
  <<: *_lint_base
  install: *default_install
  after_failure: cat docs/_build/spelling/output.txt
  addons:
    apt:
      packages:
      - libenchant-dev
- &osx_python_base
  stage: &stage_test_osx_name test under OS X (last chance to fail before deploy available)
  os: osx
  language: generic
  python: &pypy3 pypy3.5-5.10.0
  env: &env_pyenv_base
    PYTHON_VERSION: *pypy3
    PATH: ${PYENV_ROOT}/bin:${PATH}
  env: &env_osx_base
    <<: *env_pyenv_base
    PYTHON_VERSION: &py36 3.6.6
    MACOSX_DEPLOYMENT_TARGET: 10.6
    PYTHON_CONFIGURE_OPTS: "'--enable-universalsdk=/ --with-universal-archs=intel'"
  before_install: &install-from-pyenv
  - brew update
  - brew install pyenv || brew upgrade pyenv
  - &ensure_pyenv_preloaded |
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  - &install_python pyenv install --skip-existing --keep --verbose "$PYTHON_VERSION"
  - &switch_python pyenv shell "$PYTHON_VERSION"
  - &python_version python --version
  before_install: &install-from-python_org
  - curl -Lo "/tmp/python-${PYTHON_VERSION}.pkg" "https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macosx10.6.pkg" && sudo installer -pkg "/tmp/python-${PYTHON_VERSION}.pkg" -target / && rm -f "/tmp/python-${PYTHON_VERSION}.pkg"
  - export PYTHON_VERSION_SHORT=$(echo ${PYTHON_VERSION} | awk -F. '{print$1"."$2}')
  - export PYTHON_INSTALL_PATH="/Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALL_EXE="${PYTHON_INSTALL_PATH}/bin/python${PYTHON_VERSION_SHORT}"
  - export PATH="${PYTHON_INSTALL_PATH}/bin:${PATH}"
  - export PYTHON_VENV_PATH="${HOME}/virtualenv/python${PYTHON_VERSION_SHORT}"
  - env
  - ls "${PYTHON_INSTALL_PATH}/bin"
  - export VENV_CMD=$(command -v virtualenv 2>/dev/null || command -v pyvenv 2>/dev/null || echo "${PYTHON_INSTALL_EXE} -m venv")
  - |
    if [[ "${VENV_CMD}" =~ virtualenv$ ]]
    then
        export VENV_CMD="${VENV_CMD} -p '${PYTHON_INSTALL_EXE}'"
    fi
  - echo "${VENV_CMD}"
  - ${VENV_CMD} "${PYTHON_VENV_PATH}"
  - . "${PYTHON_VENV_PATH}/bin/activate"
  - curl https://bootstrap.pypa.io/get-pip.py | python
  - *python_version
  - pip --version
  before_cache:
  - brew --cache
- &generic_deploy_base
  stage: &deploy_stage_name deploy (PYPI upload itself runs only for tagged commits)
  <<: *_mainstream_python_base
  install: *default_install
  script: *default_script
  before_deploy:
  - echo > setup.py  # make Travis not invoke setuptools, only twine upload
  - pip install --upgrade pyOpenSSL  # Workaround for 'twine' not working on some versions of Mac OSX: pypa/twine#273
  deploy: &deploy_step
    provider: pypi
    # `skip_cleanup: true` is required to preserve binary wheels, built
    # inside of manylinux1 docker container during `script` step above.
    skip_cleanup: true
    skip-existing: true
    user: aio-libs-bot
    password:
      secure: TVfWbgKAtYbj5MDQnif0cbKUN7GVgckXAmRZ2tHW4ikh/rEkpOTVqPGUlidPNHay72za1ndCQf0TWiffq5vRnFI35Trt4h3LqgJ6xJUJpnTmmWW20ahFFEoWn7WulTmOyT9WxWsSSnRmecrttARhG2Iz+Kyz1OcdnfC0aHIIf7ffOpigrdm5ES1kM2wKLNxRK/oAw8OHBAy1rrKMlws2KFApwQYJEZ2rjHNXufZn861VCNu6Kflf3HysUQKKoxeHfH7XNtwle980A6w7z7w69B+1gEBHyB7WSSiLM3f/nTknP2qVR79ekf9rgzzpg/AoLYB8z9H2MrELrxChHW+O244y/QBbUAvEsxO57Snc5NvvqKH/1SUMsQMYK/RgGjIq3mh9buFu0VeSMPy7EiuKAGgDAU2G9C0a6fo0Q6v9/EOfBD7yrrZheCTp2/ViMIb7ImsDgKZZtIu3yZNA7HkjI4vaZm0uf7sPVbI0xA9MvWYP4WVxYJWmBB37Jc0JyCz+jEgTJ1wVcab1152Q7S+VdvSqjwS5b9oXtpdhl28N/HV/AZaLk/qAM8djfAUBX+4SrltkkLaVpfUOCLxbRTmI4MjKsOWUu+e6sTNdqQZIIn6XsMXxIeX5kRfAuvOrro5wRgc3bAkT19qfVqm39Re+4GMarbcs0WgkToI/8EQ6zRQ=
    # Although Travis CI instructs `setup.py` to build source distribution,
    # which is default value for distribution option (`distribution: sdist`),
    # it will also upload all wheels we've previously built in manylinux1
    # docker container using `twine upload -r pypi dist/*` command.
    # Also since commit https://github.com/travis-ci/dpl/commit/90b5e39
    # it is default that Travis PYPI provider has `skip_upload_docs: true`
    # set by default.
    # Besides above, we don't do cleanup of `dist/*`, because it's being done
    # by Travis CI PYPI deployment provider after upload, unconditionally.
    on:
      tags: true
      all_branches: true
- &osx_pypi_deploy_base_1011
  <<: *osx_python_base
  <<: *generic_deploy_base
  name: &env_os1011_msg Build and deploy to PYPI of OS X 10.11 binary wheel
  osx_image: xcode7.3
  after_success: []
  env: &env_osx_deploy_base
    <<: *env_pyenv_base
    TOXENV: build-macos-dists
- &osx_pypi_deploy_base_1012
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1012_msg Build and deploy to PYPI of OS X 10.12 binary wheel=
  osx_image: xcode8.3
  env: *env_osx_deploy_base
- &osx_pypi_deploy_base_1010
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1010_msg Build and deploy to PYPI of OS X 10.10 binary wheel=
  osx_image: xcode6.4
  env: *env_osx_deploy_base
- &osx_pypi_deploy_base_1013
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1010_msg Build and deploy to PYPI of OS X 10.13 binary wheel=
  osx_image: xcode9.4
  env: *env_osx_deploy_base
- &linux_py37
  python: 3.7
  dist: xenial
  sudo: required
- &env_extensions_disabled
  # MULTIDICT_NO_EXTENSIONS environment variables
  # are considered as enabled if they are any non-empty strings.
  MULTIDICT_NO_EXTENSIONS: X

env:
  global:
    PYENV_ROOT: ${HOME}/.pyenv
  matrix:
  - "tests with extensions enabled <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <-":
  - <<: *env_extensions_disabled

os: linux

jobs:
  fast_finish: true
  allow_failures:
  - os: osx
    python: nightly

  include:
  - <<: *linux_py37
    name: Python 3.7 env tests with extensions enabled ($TRAVIS_PYTHON_VERSION)

  - <<: *linux_py37
    name: Python 3.7 env tests with extensions disabled
    env: *env_extensions_disabled

  - python: *pypy3
    name: PyPy3.5 env tests with extensions disabled
    env: *env_extensions_disabled

  - <<: *_doc_base
    name: Documentation linting
    env:
      <<: *env_extensions_disabled
      TOXENV: doc-spelling

  - <<: *_lint_base
    name: Flake8 linter
    env:
      <<: *env_extensions_disabled
      TOXENV: flake8

  - <<: *_lint_base
    name: MyPy linter
    env:
      <<: *env_extensions_disabled
      TOXENV: mypy

  - <<: *_lint_base
    name: dist setup check
    env:
      <<: *env_extensions_disabled
      TOXENV: setup-check

  - <<: *osx_python_base
    python: &py34 3.4.4
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py34
  - <<: *osx_python_base
    python: &py35 3.5.4
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py35
  - <<: *osx_python_base
    python: *mainstream_python
    env: *env_osx_base
  - <<: *osx_python_base
    python: &py37 3.7.0
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py37
  # pypy3.5-5.10.0 fails under OS X because it's unsupported

  # Build and deploy manylinux1 binary wheels and source distribution
  - <<: *_reset_steps
    <<: *generic_deploy_base
    name: Build and deploy to PYPI of manylinux1 binary wheels for all supported Pythons and source distribution
    env:
      TOXENV: build-sdist,manylinux1
    dist: trusty
    group: edge
    services:
    - docker

    # Build and deploy MacOS binary wheels for each OSX+Python combo possible
    # OS X 10.6-10.13, Python 3.4
  - <<: *osx_pypi_deploy_base_1013
    python: *py34
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py34
    # OS X 10.6-10.13, Python 3.5
  - <<: *osx_pypi_deploy_base_1013
    python: *py35
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py35
    # OS X 10.6-10.13, Python 3.6
  - <<: *osx_pypi_deploy_base_1013
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py36
    # OS X 10.6-10.13, Python 3.7
  - <<: *osx_pypi_deploy_base_1013
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py37

stages:
- *doc_stage_name
- test
- name: *stage_test_osx_name
  if: type IN (api, cron)
- name: *deploy_stage_name
  # This will prevent deploy unless it's a tagged commit:
  if: tag IS present


cache: pip

before_cache:
- rm -f $HOME/.cache/pip/log/debug.log
