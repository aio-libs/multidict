sudo: false

language: python

python:
- 3.4
- 3.5
- &mainstream_python 3.6
- 3.6-dev
- nightly

install:
- &upgrade_python_toolset pip install --upgrade pip wheel setuptools
- pip install -r requirements/ci.txt

script:
- pytest

after_success:
- codecov

env:
  matrix:
  # MULTIDICT_NO_EXTENSIONS environment variables
  # are considered as enabled if they are any non-empty strings.
  - tests with extensions enabled
  - MULTIDICT_NO_EXTENSIONS=X

_helpers:
- &_mainstream_python_base
  python: *mainstream_python
- &_reset_steps
  env: []
  before_install: skip
  install: skip
  script: skip
  after_success: []
- &_lint_base
  stage: &doc_stage_name docs, linting and pre-test checks
  <<: *_mainstream_python_base
  <<: *_reset_steps
  install:
  - *upgrade_python_toolset
  - pip install -U -r requirements/dev.txt
- &_doc_base
  <<: *_lint_base
  install:
  - *upgrade_python_toolset
  - pip install -U -r requirements/doc.txt -r requirements/dev.txt
  after_failure: cat docs/_build/spelling/output.txt
  addons:
    apt:
      packages:
      - libenchant-dev
- &osx_python_base
  stage: &stage_test_osx_name test under OS X (last chance to fail before deploy available)
  os: osx
  language: generic
  python: &pypy3 pypy3.5-5.8.0
  env:
  - &env_pypy3 PYTHON_VERSION=pypy3.5-5.8.0
  - &env_pyenv PYENV_ROOT="$HOME/.pyenv"
  - &env_path PATH="$PYENV_ROOT/bin:$PATH"
  before_install:
  - brew update
  - brew install readline xz
  - &ensure_pyenv_installed |
    if [ ! -f "$PYENV_ROOT/bin/pyenv" ]
    then
      rm -rf "$PYENV_ROOT"
      curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
    fi
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    pyenv update
  - &install_python pyenv install --skip-existing --keep --verbose "$PYTHON_VERSION"
  - &switch_python pyenv shell "$PYTHON_VERSION"
  - &python_version python --version
  before_cache:
  - brew --cache

os: linux

jobs:
  fast_finish: true
  allow_failures:
  - os: osx
    python: nightly

  include:
  - python: *pypy3
    env:
    - MULTIDICT_NO_EXTENSIONS=X

  - <<: *_doc_base
    env:
    - docs
    script:
    - make doc-spelling

  - <<: *_lint_base
    env:
    - flake8
    script:
    - flake8 multidict tests

  - <<: *_lint_base
    env:
    - mypy
    script:
    - make mypy

  - <<: *_lint_base
    env:
    - dist setup check
    install:
    - *upgrade_python_toolset
    - pip install docutils
    script:
    - python setup.py check --metadata --restructuredtext --strict --verbose

  - <<: *osx_python_base
    python: 3.4
    env:
    - PYTHON_VERSION=3.4.6
    - *env_pyenv
    - *env_path
  - <<: *osx_python_base
    python: 3.5
    env:
    - PYTHON_VERSION=3.5.3
    - *env_pyenv
    - *env_path
  - <<: *osx_python_base
    python: *mainstream_python
    env:
    - PYTHON_VERSION=3.6.1
    - *env_pyenv
    - *env_path
  - <<: *osx_python_base
    python: nightly
    env:
    - PYTHON_VERSION=3.7-dev
    - *env_pyenv
    - *env_path
  # pypy3.5-5.8.0 fails under OS X because it's unsupported

  - stage: &deploy_stage_name deploy (PYPI upload itself runs only for tagged commits)
    <<: *_mainstream_python_base
    <<: *_reset_steps
    dist: trusty
    group: edge
    services:
    - docker
    script:
    - mkdir dist  # so that it whould have priviliges of the current Travis user
    - ./tools/run_docker.sh "multidict"
    deploy:
      provider: pypi
      # `skip_cleanup: true` is required to preserve binary wheels, built
      # inside of manylinux1 docker container during `script` step above.
      skip_cleanup: true
      user: andrew.svetlov
      password:
        secure: ZFCicrh4l5zraarOwAwLXzYyGLnrxMHAFEFxF6ZEpECamu4eDsbKAFM/ydYdHoL19ocLr5+Xg1fmgd5tjc29c2rHQh29iDFi7tWai2pDFw+WqeHaV6e7ZJEEnU29OpSRzkGIk+K27mn7ZsB97q3Rkg2JBYRBkeK6HNyZ5YgIaVssXXXuCi5LZ1Y0rg8Nbapes1RUqoHGWgBwlCjAVxp9U7RXqJ6jucHDGUHU+9AgnnlGI7Cqs3xLqp4/xt2VoIjL0XwG2y05WLLpEF3Jwtj2voiPsnSTpUwklXVr1rEwScPCMlImxmWmudvh7xcPtcK9IOHIvk6y/lmNHJeevRn+df50LtBdr+0Wrq/t3Tt5d05XKCgqaLtw2P4GYNfTsx1RmQjHzUlfHKke7UZ1P+GsZTKN9nLKVdFTi2YzQ0TVmr/JjAmVqldRBOvEMnVoDn1rj1gdHMIu4d/gRVTcSS3riey+L2o6NwKjoc7aV5Uz47Z7fjz09Q6xml9eBWAHx9O07Iq+BaCikhBzeHGo+AkIzGMQdCSyQ8tTjQtEq6zWGxolZQFJeW9glTGLSYMfiVaPDEyqxaDm/QKssnZiEIbq1YM018C6ojiA3xbPJrwSZ8l/mnCkxrIcbKcwwtaHFPyP/FicePT01oJAXx08wnwe5H2l6lqkSGgRnGendZNeEuQ=
      # Although Travis CI instructs `setup.py` to build source distribution,
      # which is default value for distribution option (`distribution: sdist`),
      # it will also upload all wheels we've previously built in manylinux1
      # docker container using `twine upload -r pypi dist/*` command.
      # Also since commit https://github.com/travis-ci/dpl/commit/90b5e39
      # it is default that Travis PYPI provider has `skip_upload_docs: true`
      # set by default.
      # Besides above, we don't do cleanup of `dist/*`, because it's being done
      # by Travis CI PYPI deployment provider after upload, unconditionally.
      on:
        tags: true
        all_branches: true

stages:
- *doc_stage_name
- test
- name: *stage_test_osx_name
  if: type IN (api, cron) OR tag IS present
- name: *deploy_stage_name
  # This will prevent deploy unless it's a tagged commit:
  if: tag IS present


cache: pip

before_cache:
- rm -f $HOME/.cache/pip/log/debug.log
